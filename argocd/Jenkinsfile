pipeline {
  options {
    buildDiscarder(logRotator(daysToKeepStr: '1', numToKeepStr: '3'))
    disableConcurrentBuilds()
    timestamps()
    timeout(time: 10, unit: 'MINUTES')
  }
  agent {
    kubernetes {
      label 'bibi-web-app'
      idleMinutes 5
      yamlFile 'jenkins_k8s.yaml'
      defaultContainer 'jnlp'
   }
  }
  stages {
    stage('Build') {
      steps {
        container('maven') {
          sh """
            pwd
            """
        }
      }
    }
    stage('Test') {
      steps {
        container('maven') {
          sh """
             ls -ltr
          """
        }
      }
    }
    stage('Push') {
      steps {
        container('docker') {
          sh """
             docker ps -a
          """
        }//container
      }//steps
    }//stage
    stage('Deploy') {
      steps {
        container('inbound-agent') {
          withKubeConfig([namespace: "demo-app"]) {
              sh """
                 kubectl get pods
                 argocd login    argocd-server.argocd:80   --insecure --username admin --password a3bAcd01
                 kubectl apply -f argocd/bibi-argocd-web-app.yaml
                 argocd app  sync argocd/bibi-argocd-web-app.yaml
                 sleep 60
              """
          }//withKubeConfig
        }//container
      }//steps
    }//stage

    stage('Update my ubuntu docker image') {
        steps {
            container('docker') {
              withCredentials([usernamePassword(credentialsId: 'docker_hub_ci_cd_repo', passwordVariable: 'pass', usernameVariable: 'user')]) {
              sh """
                docker login -u $user -p $pass
                docker build -t bibiefrat/ubuntu:1.0.${env.BUILD_ID} ubuntu/.
                docker push bibiefrat/ubuntu:1.0.${env.BUILD_ID}
              """
              }//withCredentials
            }//container
        }//steps
    }//stage

  }//stages
  post {
        always {
          container('inbound-agent') {
              //withKubeConfig([namespace: "demo-app"]) {
                  sh """
                  echo " --------------- removing container ---------------"
                  docker rmi -f bibiefrat/ubuntu:1.0.${env.BUILD_ID} --force
                  argocd app  delete argocd/bibi-argocd-web-app.yaml -y
                  """
              //}//withKubeConfig
          }//container

        }
  }
}